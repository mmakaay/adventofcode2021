# Get first digit
inp w         - w = $1, substituted later on

mul x 0       - already 0, so noop

add x z       - z = 0, so noop

mod x 26      - 0 % 25 = 0, so noop

div z 1       - always outcome z, so noop

add x 14      - w is compared to 14

eql x w       - will always be false (w is 0 - 9)

eql x 0       - x = 1, since previous comparison on x will always be false
                the x is subtituted later on

mul y 0       - combined with upcoming

add y 25      - y = 25, but is overwritten by upcoming

mul y x       - x = 1, so noop

add y 1       - y = 26, but is overwritten by upcoming

mul z y       - z = 0 so noop

mul y 0       - y = 0, back to original value, so noop

add y w       - y = w, extended by upcoming

add y 12        y = w + 12, substitutes to
              - y = $1 + 12, overwritten

mul y x       - x = 1, so noop

add z y       - z = y, substitutes to
              - z = $1 + 12, overwritten

inp w         - w = $2, overwritten

mul x 0       - x = 0, extended by upcoming

add x z       - x = z, extended by upcoming

mod x 26        x = z % 26, substites to
              - x = ($1 + 12) % 26, extended by upcoming

div z 1       - always outcome z, so noop

add x 15      - x = (($1 + 12) % 26) + 15, overwritten

eql x w       - x = 0 , because w < 10 and x > 10, overwritten

eql x 0       - x = 1 , because x is always 0, overwritten

mul y 0       - y = 0, extended

add y 25      - y = 25, extended

mul y x       - y = 25, extended

add y 1       - y = 26, overwritten

mul z y       - z = z * y, substituted
              - z = ($1 + 12) * 26

mul y 0       - y = 0, extended

add y w       - y = $2, extended

add y 7       - y = $2 + 7, extended

mul y x       - y = $2 + 7

add z y       - z = z + y, substituted
              - z = ($1+12)*26 + ($2+7), overwritten

inp w         - w = $3

mul x 0       - x = 0, overwritten

add x z       - x = ($1+12)*26 + ($2+7), overwrite

mod x 26      - x = (($1+12)*26 + ($2+7))%26

div z 1       - z = ($1+12)*26 + ($2+7)

add x 12      - x = (($1+12)*26 + ($2+7))%26 + 12

eql x w       - x = 0, w < 10, x > 10

eql x 0       - x = 1

mul y 0       - y = 0

add y 25      - y = 25

mul y x       - y = 25

add y 1       - y = 26

mul z y       - z = (($1+12)*26 + ($2+7)) * 26

mul y 0       - y = 0

add y w       - y = $3

add y 1       - y = $3 + 1

mul y x       - y = $3 + 1

add z y       - z = (($1+12)*26 + ($2+7)) * 26 + ($3+1)

inp w         - w = $4

mul x 0       - x = 0

add x z       - x = (($1+12)*26 + ($2+7)) * 26 + ($3+1)

mod x 26      - x = ((($1+12)*26 + ($2+7)) * 26 + ($3+1)) % 26

div z 1       - z = (($1+12)*26 + ($2+7)) * 26 + ($3+1)

add x 11      - x = ((($1+12)*26 + ($2+7)) * 26 + ($3+1)) % 26 + 11

eql x w       - x = 0, because w < 10 and x > 10

eql x 0       - x = 1

mul y 0       - y = 0

add y 25      - y = 25

mul y x       - y = 1

add y 1       - y = 26

mul z y       - z = ((($1+12)*26 + ($2+7)) * 26 + ($3+1)) * 26

mul y 0       - y = 0

add y w       - y = $4

add y 2       - y = $4 + 2

mul y x       - y = $4 + 2

add z y       - z = ((($1+12)*26 + ($2+7))* 26 + ($3+1))*26 + ($4+2)

inp w         - w = $5

mul x 0       - x = 0

add x z       - x = ((($1+12)*26 + ($2+7))* 26 + ($3+1))*26 + ($4+2)

mod x 26      - x = (((($1+12)*26 + ($2+7))* 26 + ($3+1))*26 + ($4+2)) % 26

div z 26      - z = (((($1+12)*26 + ($2+7))* 26 + ($3+1))*26 + ($4+2)) // 26
                some logic:
                a = (($1+12)*26 + ($2+7))* 26 + ($3+1)
                b = ($4+2)
                z = (a*26 + b) // 26
                max value for b is (9+1) = 10, and 10//26 = 0, therefore this is the same as:
                z = (a*26) // 26
                and this is the same as:
                z = a
                substituted:
              - z = (($1+12)*26 + ($2+7))* 26 + ($3+1)

add x -5      - x = (((($1+12)*26 + ($2+7))* 26 + ($3+1))*26 + ($4+2)) % 26 - 5
                some logic:
                x = (something*26 + ($4+2)) % 26 - 5, with $4+2 never > 26, so this is
              - x = ($4+2) % 26 - 5    (which has values for $4 0..9 => -2..9

eql x w       - x == w is the same as: $5 == ($4+2) % 26 - 5 
                true when ($4,$5) in [(3,0), (4,1), (5,2), (6,3), (7,4), (8,5), (9,6)]
                so both outcomes possible here, 1 an d0
                Route split:
                A for ($4,$5) in [(3,0), (4,1), (5,2), (6,3), (7,4), (8,5), (9,6)]
                B otherwise
              - A: x = 1
                B: x = 0

eql x 0       - A: x = 0
                B: x = 1 

mul y 0       - A: y = 0
                B: y = 0

add y 25      - A: y = 25
                B: y = 25

mul y x       - A: y = 0
                B: y = 25

add y 1       - A: y = 1
                B: y = 26

mul z y       - A: z = (($1+12)*26 + ($2+7))* 26 + ($3+1)
                B: z = ((($1+12)*26 + ($2+7))* 26 + ($3+1)) * 26  

mul y 0       - y = 0

add y w       - y = $5

add y 4       - y = $5+4

mul y x       - A: y = 0
                B: y = $5+4

add z y       - A: z = (($1+12)*26 + ($2+7))* 26 + ($3+1)
                B: z = ((($1+12)*26 + ($2+7))* 26 + ($3+1)) * 26 + $5+4

inp w         - w = $6

mul x 0       - x = 0

add x z       - A: x = (($1+12)*26 + ($2+7))* 26 + ($3+1)
                B: x = ((($1+12)*26 + ($2+7))* 26 + ($3+1)) * 26 + $5+4

mod x 26      - A: x = ((($1+12)*26 + ($2+7))* 26 + ($3+1))%26
                B: x = (((($1+12)*26 + ($2+7))* 26 + ($3+1)) * 26 + $5+4)%26
              - Can be reduced to:
                A: x = ($3+1)%26
                B: x = ($5+4)%26

div z 1       - A: z = (($1+12)*26 + ($2+7))* 26 + ($3+1)
                B: z = ((($1+12)*26 + ($2+7))* 26 + ($3+1)) * 26 + $5+4

add x 14      - A: x = ($3+1)%26 + 14
                B: x = ($5+4)%26 +14

eql x w       - A: x = 0, since $6 < 10 and X > 10
                B: x = 0, same reason

eql x 0       - x = 1

mul y 0       - y = 0

add y 25      - y = 25

mul y x       - y = 25

add y 1       - y = 26

mul z y       - A: z = ((($1+12)*26 + ($2+7))* 26 + ($3+1))*26
                B: z = (((($1+12)*26 + ($2+7))* 26 + ($3+1)) * 26 + $5+4)*26

mul y 0       - y = 0

add y w       - y = $6

add y 15      - y = $6 + 15

mul y x       - y = $6 + 15
add z y       - A: z = ((($1+12)*26 + ($2+7))* 26 + ($3+1))*26 +($6+15)
                B: z = (((($1+12)*26 + ($2+7))* 26 + ($3+1)) * 26 + $5+4)*26 + ($6*15)

inp w         - w = $7

mul x 0       - x = 0

add x z       - A: x = ((($1+12)*26 + ($2+7))* 26 + ($3+1))*26 +($6+15)
                B: x = (((($1+12)*26 + ($2+7))* 26 + ($3+1)) * 26 + $5+4)*26 + ($6*15)

mod x 26      - A: x = (((($1+12)*26 + ($2+7))* 26 + ($3+1))*26 +($6+15)) % 26
                B: x = ((((($1+12)*26 + ($2+7))* 26 + ($3+1)) * 26 + $5+4)*26 + ($6*15)) % 26

div z 1       - A: z = ((($1+12)*26 + ($2+7))* 26 + ($3+1))*26 +($6+15)
                B: z = (((($1+12)*26 + ($2+7))* 26 + ($3+1)) * 26 + $5+4)*26 + ($6*15)

add x 15
              - A: x = (((($1+12)*26 + ($2+7))* 26 + ($3+1))*26 +($6+15)) % 26 + 15
                B: x = ((((($1+12)*26 + ($2+7))* 26 + ($3+1)) * 26 + $5+4)*26 + ($6*15)) % 26 + 15

eql x w       - x = 0

eql x 0       - x = 1

mul y 0       - y = 0

add y 25      - y = 25

mul y x       - y = 25

add y 1       - y = 26

mul z y       - A: z = (((($1+12)*26 + ($2+7))* 26 + ($3+1))*26 +($6+15))*26
                B: z = ((((($1+12)*26 + ($2+7))* 26 + ($3+1)) * 26 + $5+4)*26 + ($6*15))*26

mul y 0       - y = 0

add y w       - y = $7

add y 11      - y = $7 + 11

mul y x       - y = $7 + 11

add z y       - A: z = (((($1+12)*26 + ($2+7))*26 + ($3+1))*26 +($6+15))*26 + ($7+11)
                B: z = ((((($1+12)*26 + ($2+7))*26 + ($3+1))*26 + $5+4)*26 + ($6*15))*26 + ($7+11)

inp w         - w = $8

mul x 0       - x = 0

add x z       - A: x = (((($1+12)*26 + ($2+7))*26 + ($3+1))*26 +($6+15))*26 + ($7+11)
                B: x = ((((($1+12)*26 + ($2+7))*26 + ($3+1))*26 + $5+4)*26 + ($6*15))*26 + ($7+11)

mod x 26      - A: x = ((((($1+12)*26 + ($2+7))*26 + ($3+1))*26 +($6+15))*26 + ($7+11)) % 26
                   x = ($7+11) % 26
                B: x = (((((($1+12)*26 + ($2+7))*26 + ($3+1))*26 + $5+4)*26 + ($6*15))*26 + ($7+11)) 26
                   x = ($7+11) % 26
                merges into:
                   x = ($7+11) % 26

div z 26      - A: z = ((((($1+12)*26 + ($2+7))*26 + ($3+1))*26 +($6+15))*26 + ($7+11)) // 26
              -    z = ((($1+12)*26 + ($2+7))*26 + ($3+1))*26 +($6+15)
              - B: z = (((((($1+12)*26 + ($2+7))*26 + ($3+1))*26 + $5+4)*26 + ($6*15))*26 + ($7+11)) // 26
              -    z = (((($1+12)*26 + ($2+7))*26 + ($3+1))*26 + $5+4)*26 + ($6*15)

add x -13     - x = (($7+11) % 26 - 13)      range: $7 = 0..9 => x = -2 .. 7

eql x w       - x = 1 for ($7,$8) in [(2,0), (3,1), (4,2), (5,3), (6,4), (7,5), (8,6), (9,7)]
                x = 0 otherwise

eql x 0       - x = 0 for ($7,$8) in [(2,0), (3,1), (4,2), (5,3), (6,4), (7,5), (8,6), (9,7)]
                x = 1 otherwise

mul y 0       - y = 0

add y 25      - y = 25

mul y x       - y = 0 for ($7,$8) in [(2,0), (3,1), (4,2), (5,3), (6,4), (7,5), (8,6), (9,7)]
                y = 25 otherwise

add y 1       - y = 1 for ($7,$8) in [(2,0), (3,1), (4,2), (5,3), (6,4), (7,5), (8,6), (9,7)]
                y = 26 otherwise

                Route split:
                C for ($7,$8) in [(2,0), (3,1), (4,2), (5,3), (6,4), (7,5), (8,6), (9,7)]
                D otherwise

mul z y       - AC: z = ((($1+12)*26 + ($2+7))*26 + ($3+1))*26 +($6+15)
                AD: z = (((($1+12)*26 + ($2+7))*26 + ($3+1))*26 +($6+15)) * 26
                BC: z = (((($1+12)*26 + ($2+7))*26 + ($3+1))*26 + $5+4)*26 + ($6*15)
                BD: z = ((((($1+12)*26 + ($2+7))*26 + ($3+1))*26 + $5+4)*26 + ($6*15)) * 26

div z 26      - AC: z = (((($1+12)*26 + ($2+7))*26 + ($3+1))*26 +($6+15)) % 26
                AD: z = ((((($1+12)*26 + ($2+7))*26 + ($3+1))*26 +($6+15)) * 26) % 26
                BC: z = ((((($1+12)*26 + ($2+7))*26 + ($3+1))*26 + $5+4)*26 + ($6*15)) % 26
                BD: z = (((((($1+12)*26 + ($2+7))*26 + ($3+1))*26 + $5+4)*26 + ($6*15)) * 26) % 26

                resolve:

                AC: z = ($6+15) % 26
                AD: z = 0
                BC: z = ($6*15) % 26
                BD: z = 0

mul y 0       - y = 0

add y w         y = $8

add y 5         y = $8 + 5

mul y x  C: y = 0
         D: y = ($8 + 5)

add z y
          - AC: z = ($6+15) % 26
            AD: z = ($8+5)
            BC: z = ($6*15) % 26
            BD: z = ($8+5)

            simplify: A or B has no influence anymore.

            C: z = ($6*15) % 26
            D: z = ($8+5)

inp w            w = $9

mul x 0       -  x = 0

add x z       -  C: x = ($6*15) % 26
                 D: x = ($8+5)

mod x 26      - C: x = ($6*15) % 26 % 26  --simplify--> ($6*15) % 26 
                D: x = ($8+5) % 26

div z 26  C: z = ($6*15) % 26 // 26
          D: z = ($8+5) // 26

          simplify to:

          C: z = 0
          D: z = ($8+5) // 26

add x -16 C: x = ($6*15) % 26 - 16
          D: x = ($8+5) % 26 - 16

eql x w   C: 1 for ($8,$9) in [(1,0),(2,1),(3,2),(4,3),(5,4),(6,5),(7,6),(8,7),(9,8)]
          D: 0 in all cases
          earlier reason: C for ($7,$8) in [(2,0), (3,1), (4,2), (5,3), (6,4), (7,5), (8,6), (9,7)]
          Combining the logic to not have to introduce more splits. New splits:

          E: 1 for ($8,$9) in        [(1,0),(2,1),(3,2),(4,3),(5,4),(6,5),(7,6),(8,7),(9,8)] AND
                   ($8,$7) in [(0,2), (1,3),(2,4),(3,5),(4,6),(5,7),(6,8),(7,9)]
               which combines into:
               for ($7,$8,$9) in [(3,1,0),(4,2,1),(5,3,2),(6,4,3),(7,5,4),(8,6,5),(9,7,6)]

          F: 0 otherwise
          

eql x 0   E: x = 0
          F: x = 1

mul y 0         y = 0

add y 25        y = 25

mul y x      E: y = 0
             F: y = 25

add y 1      E: y = 1
             F: y = 26

mul z y   CE: z = 0
          CF: z = 0
          DE: z = ($8+5) // 26
          DF: z = ($8+5) // 26 * 26

mul y 0         y = 0

add y w         y = $9

add y 3   y = $9 + 3

mul y x   E: y = 0
          F: y = $9 + 3

add z y   CE: z = 0
          CF: z = ($9+3)
          DE: z = ($8+5) // 26
          DF: z = ($8+5) // 26 * 26 + ($9+3)

inp w     w = $10

mul x 0   x = 0

add x z   CE: x = 0
          CF: x = ($9+3)
          DE: x = ($8+5) // 26
          DF: x = ($8+5) // 26 * 26 + ($9+3)

mod x 26  CE: x = 0
          CF: x = ($9+3) % 26
          DE: x = ($8+5) // 26 % 26 --simplify--> 0
          DF: x = (($8+5) // 26 * 26 + ($9+3)) % 26 --simplify--> ($9+3) % 26

          The outcomes for F and E are always the same now:

           F: x = ($9+3) % 26
           E: x = 0

div z 26  CE: z = 0
          CF: z = ($9+3) // 26
          DE: z = ($8+5) // 26
          DF: z = (($8+5) // 26 * 26 + ($9+3)) // 26

          simplify to:

          CE: z = 0
          CF: z = ($9+3) // 26
          DE: z = ($8+5) // 26
          DF: z = ($8+5) // 26 + ($9+3) // 26

add x -8      F: x = ($9+3) % 26 - 8
              E: x = -8

eql x w    F: x = 1 for ($9,$10) in [(5,0),(6,1),(7,2),(8,3),(9,4)]
              x = 0 otherwise
           E: x = 0

           New split G for ($9,$10) in [(5,0),(6,1),(7,2),(8,3),(9,4)]
           New split H for otherwise

           FG: x = 1
           FH: x = 0
            E: x = 0

eql x 0    FG: x = 0
           FH: x = 1
            E: x = 1

mul y 0       y = 0

add y 25      y = 25

mul y x    FG: x = 0
           FH: x = 25
            E: x = 25

add y 1    FG: x = 1
           FH: x = 26
            E: x = 26

mul z y   CE: z = 0
          CF: z = ($9+3) // 26
          DE: z = ($8+5) // 26
          DF: z = ($8+5) // 26 + ($9+3) // 26

mul y 0
add y w
add y 9
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 1
add x 15
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 2
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 26
add x -8
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 3
mul y x
add z y
inp w
mul x 0
add x z
mod x 26
div z 26
add x 0
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 3
mul y x
add z y

inp w           *w = $14
mul x 0          x = 0
add x z          x = z
mod x 26         x = z % 26
div z 26         z = z // 26
add x -4         x = z % 26 - 4
eql x w          x = (z % 26 - 4) == $14
eql x 0         *x = (z % 26 - 4) != $14
mul y 0          y = 0
add y 25         y = 25
mul y x          y = 25*((z % 26 - 4) != $14)
add y 1          y = 25*((z % 26 - 4) != $14) + 1           ( 1 or 26)
mul z y          z = z * (25*((z % 26 - 4) != $14) + 1)
mul y 0          y = 0
add y w          y = $14
add y 11         y = $14 + 11
mul y x         *y = ($14+11) * ((z % 26 - 4) != $14)
add z y         *z = z + (($14+11) * ((z%26 - 4) != $14))

